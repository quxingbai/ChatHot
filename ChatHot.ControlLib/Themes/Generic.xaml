<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:f="clr-namespace:ChatHot.ControlLib.Form"
    xmlns:cv="clr-namespace:ChatHot.ControlLib.Converters"
    xmlns:local="clr-namespace:ChatHot.ControlLib.UI" xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.AeroLite">

    <cv:MessageModelToObjectContentConverter x:Key="MessageModelConverter"/>

    <Style TargetType="{x:Type local:TitleBox}">
        <Style.Resources>
            <SolidColorBrush x:Key="Static.Foreground" Color="White"/>
            <LinearGradientBrush x:Key="Static.Backgroud" StartPoint="0,0" EndPoint="1,0" >
                <GradientStop Color="#FF4C8BFE" Offset="0" />
                <GradientStop Color="#FF1FD1FF" Offset="1" />
            </LinearGradientBrush>
            <SolidColorBrush x:Key="IsMouseOver.TitleBoxButton.BackgroundWhite" Color="#7FFFFFFF"/>
            <SolidColorBrush x:Key="IsMouseCaptured.TitleBoxButton.BackgroundWhite" Color="#B2FFFFFF"/>
            <SolidColorBrush x:Key="IsMouseOver.TitleBoxButton.BackgroundRed" Color="#E5FF0000"/>
            <SolidColorBrush x:Key="IsMouseCaptured.TitleBoxButton.BackgroundRed" Color="Red"/>
        </Style.Resources>
        <Setter Property="Height" Value="37"/>
        <Setter Property="Background" Value="{DynamicResource Static.Backgroud}" />
        <Setter Property="Foreground" Value="{DynamicResource Static.Foreground}"/>
        <Setter Property="FontSize" Value="17" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TitleBox}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="50" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="150" />
                            </Grid.ColumnDefinitions>
                            <Image Source="{TemplateBinding Icon}" Grid.Column="0"/>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            <WrapPanel Grid.Column="2" HorizontalAlignment="Right">
                                <WrapPanel.Resources>
                                    <Style TargetType="Button">
                                        <Setter Property="Width" Value="35" />
                                        <Setter Property="Height" Value="35" />
                                        <Setter Property="Background" Value="#00000000"/>
                                        <Setter Property="BorderThickness" Value="0"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="Button">
                                                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                                        <Grid>
                                                            <ContentPresenter Width="13.55" Height="12" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                        </Grid>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="Tag" Value="0"/>
                                                    <Condition Property="IsMouseOver" Value="True"/>
                                                </MultiTrigger.Conditions>
                                                <Setter Property="Background" Value="{DynamicResource IsMouseOver.TitleBoxButton.BackgroundWhite}"/>
                                            </MultiTrigger>
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="Tag" Value="0"/>
                                                    <Condition Property="IsMouseCaptured" Value="True"/>
                                                </MultiTrigger.Conditions>
                                                <Setter Property="Background" Value="{DynamicResource IsMouseCaptured.TitleBoxButton.BackgroundWhite}"/>
                                            </MultiTrigger>
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="Tag" Value="1"/>
                                                    <Condition Property="IsMouseOver" Value="True"/>
                                                </MultiTrigger.Conditions>
                                                <Setter Property="Background" Value="{DynamicResource IsMouseOver.TitleBoxButton.BackgroundRed}"/>
                                            </MultiTrigger>
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="Tag" Value="1"/>
                                                    <Condition Property="IsMouseCaptured" Value="True"/>
                                                </MultiTrigger.Conditions>
                                                <Setter Property="Background" Value="{DynamicResource IsMouseCaptured.TitleBoxButton.BackgroundRed}"/>
                                            </MultiTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </WrapPanel.Resources>
                                <Button  Tag="0" Command="{TemplateBinding MinCommand}" Visibility="{TemplateBinding MinButtonVisibility}">
                                    <Button.Content>
                                        <Image Source="/ChatHot.ControlLib;component/Icon/Min.png"/>
                                    </Button.Content>
                                </Button>
                                <Button  Tag="0" Name="BT_Max" Command="{TemplateBinding MaxCommand}" Visibility="{TemplateBinding MaxButtonVisibility}">
                                    <Button.Content>
                                        <Image Source="/ChatHot.ControlLib;component/Icon/Max.png"/>
                                    </Button.Content>
                                </Button>
                                <Button  Tag="1" Command="{TemplateBinding CloseCommand}" Visibility="{TemplateBinding CloseButtonVisibility}">
                                    <Button.Content>
                                        <Image Source="/ChatHot.ControlLib;component/Icon/Close.png"/>
                                    </Button.Content>
                                </Button>
                            </WrapPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsParentMax" Value="True">
                            <Setter TargetName="BT_Max" Property="Button.Content">
                                <Setter.Value>
                                    <Image Source="/ChatHot.ControlLib;component/Icon/MaxBack.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsParentMax" Value="False">
                            <Setter TargetName="BT_Max" Property="Button.Content">
                                <Setter.Value>
                                    <Image Source="/ChatHot.ControlLib;component/Icon/Max.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type f:ChatFormBasic}">
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="ResizeMode" Value="CanResizeWithGrip"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type f:ChatFormBasic}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Name="BD_MainBorder">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <local:TitleBox Grid.Row="0" Content="{TemplateBinding Title}" MinButtonVisibility="{TemplateBinding MinButtonVisibility}" MaxButtonVisibility="{TemplateBinding MaxButtonVisibility}" CloseButtonVisibility="{TemplateBinding CloseButtonVisibility}"/>
                            <Border Grid.Row="1">
                                <ContentPresenter/>
                            </Border>
                            <ResizeGrip Grid.Row="1" HorizontalAlignment="Right" VerticalAlignment="Bottom"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="Margin" Value="5" TargetName="BD_MainBorder"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ImageButton}">
        <Setter Property="ImageWidth" Value="{Binding Width}"/>
        <Setter Property="ImageHeight" Value="{Binding Height}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageButton}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Image Source="{TemplateBinding ImageContent}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="{TemplateBinding ImageWidth}" Height="{TemplateBinding ImageHeight}"/>
                            <ContentPresenter/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="Blue"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type local:ListTextBox}">
        <Setter Property="FontSize" Value="17.5"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ListTextBox}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Image Source="{TemplateBinding LeftIcon}" Width="17" Height="17"/>
                            <TextBox AcceptsReturn="True" Text="{Binding Text,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,RelativeSource={RelativeSource Mode=TemplatedParent}}" BorderThickness="0" BorderBrush="{x:Null}" Grid.Column="1"/>
                            <ToggleButton Grid.Column="2"  Height="25" Background="#02000000" IsChecked="{Binding IsDropDownOpen,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,RelativeSource={RelativeSource Mode=TemplatedParent}}" Name="BT_DropDown" ToolTip="{Binding IsChecked}">
                                <ToggleButton.Template>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <ContentPresenter/>
                                    </ControlTemplate>
                                </ToggleButton.Template>
                                <ToggleButton.Content>
                                    <Image Source="/ChatHot.ControlLib;component/Icon/DownArrow.png"/>
                                </ToggleButton.Content>
                            </ToggleButton>
                            <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Grid.Column="2" Width="{TemplateBinding Width}" AllowsTransparency="True">
                                <Grid>
                                    <Border BorderBrush="Gray" BorderThickness="1" Background="#B2FFFFFF">
                                        <ScrollViewer Height="110">
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </ScrollViewer>
                                    </Border>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ButtonBasic}">
        <Style.Resources>
            <SolidColorBrush Color="#FF07BDFD" x:Key="IsMouseOver.Backgroudn"/>
            <SolidColorBrush Color="#FF21ADFA" x:Key="Static.Backgroudn"/>
        </Style.Resources>
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ButtonBasic}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource IsMouseOver.Backgroudn}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="{DynamicResource Static.Backgroudn}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type local:ListBoxItemCH}">
        <Style.Resources>
            <SolidColorBrush x:Key="IsSelected.Background" Color="#19000000"/>
        </Style.Resources>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ListBoxItemCH}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsSelected.Background}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsSelected.Background}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ListBoxCH}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ListBoxCH}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ItemsPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type local:ChatTextBox}">
        <Setter Property="BorderThickness" Value="0,0.4,0,0"/>
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ChatTextBox}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid Grid.Row="0" Margin="5,5,0,0">
                                <WrapPanel>
                                    <WrapPanel.Resources>
                                        <Style TargetType="Button">
                                            <Setter Property="Width" Value="30"/>
                                            <Setter Property="Height" Value="30"/>
                                            <Setter Property="Background" Value="{x:Null}"/>
                                            <Setter Property="BorderBrush" Value="{x:Null}"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="Button">
                                                        <Border Background="{TemplateBinding Background}"
                                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                                BorderThickness="{TemplateBinding BorderThickness}">
                                                            <ContentPresenter Margin="5.5"/>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Background" Value="#16000000"/>
                                                            </Trigger>
                                                            <Trigger Property="IsMouseCaptured" Value="True">
                                                                <Setter Property="Background" Value="#26000000"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </WrapPanel.Resources>
                                    <Button Command="{TemplateBinding SendImageCommand}">
                                        <Image Source="/ChatHot.ControlLib;component/Icon/img.png"/>
                                    </Button>
                                </WrapPanel>
                            </Grid>
                            <Grid Grid.Row="1" MinHeight="50" Margin="0,9,0,0">
                                <ScrollViewer Grid.Column="1" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                            </Grid>
                            <Grid Grid.Row="2">
                                <WrapPanel HorizontalAlignment="Right">
                                    <local:ButtonBasic Content="Close" Command="{TemplateBinding CloseCommand}">
                                        <local:ButtonBasic.Style>
                                            <Style TargetType="local:ButtonBasic">
                                                <Setter Property="Width" Value="60"/>
                                                <Setter Property="Height" Value="29"/>
                                                <Setter Property="Margin" Value="0,0,16,14"/>
                                                <Setter Property="HorizontalAlignment" Value="Right"/>
                                                <Setter Property="Background" Value="White"/>
                                                <Setter Property="BorderBrush" Value="Gray"/>
                                                <Setter Property="BorderThickness" Value="1.5"/>
                                                <Setter Property="Foreground" Value="Black"/>
                                                <Style.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Background" Value="#FFEFEFF0"/>
                                                    </Trigger>
                                                    <Trigger Property="IsMouseCaptured" Value="True">
                                                        <Setter Property="Background" Value="#FFE1E2E3"/>
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </local:ButtonBasic.Style>
                                    </local:ButtonBasic>
                                    <local:ButtonBasic Content="Send" Command="{TemplateBinding SendMessageCommand}">
                                        <local:ButtonBasic.Style>
                                            <Style TargetType="local:ButtonBasic">
                                                <Style.Resources>
                                                    <SolidColorBrush Color="#FF47C8F8" x:Key="IsMouseOver.Background" />
                                                    <SolidColorBrush Color="#FF0FA3E4" x:Key="IsMouseCaptured.Background" />
                                                    <SolidColorBrush Color="#FF12B7F5" x:Key="Static.Background"/>
                                                </Style.Resources>
                                                <Setter Property="Width" Value="90"/>
                                                <Setter Property="Height" Value="29"/>
                                                <Setter Property="Margin" Value="0,0,16,14"/>
                                                <Setter Property="HorizontalAlignment" Value="Right"/>
                                                <Setter Property="Background" Value="{DynamicResource Static.Background}"/>
                                                <Setter Property="BorderBrush" Value="Gray"/>
                                                <Setter Property="BorderThickness" Value="1"/>
                                                <Setter Property="Foreground" Value="Black"/>
                                                <Style.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Background" Value="{DynamicResource IsMouseOver.Background}"/>
                                                    </Trigger>
                                                    <Trigger Property="IsMouseCaptured" Value="True">
                                                        <Setter Property="Background" Value="{DynamicResource  IsMouseCaptured.Background}"/>
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </local:ButtonBasic.Style>
                                    </local:ButtonBasic>
                                </WrapPanel>
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:MessageRow}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MessageRow}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <ContentControl Content="{TemplateBinding MessageSource, Converter={StaticResource MessageModelConverter},ConverterParameter={x:Null}}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:UserHeadImage}">
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Color="Blue" BlurRadius="40" ShadowDepth="0"  Direction="0" Opacity="0.5"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:UserHeadImage}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Ellipse Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" HorizontalAlignment="Center" Stroke="White" StrokeThickness="0.5" >
                            <Ellipse.Fill>
                                <VisualBrush>
                                    <VisualBrush.Visual>
                                        <Image Source="{TemplateBinding Source}" Width="50" Height="50"/>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </Ellipse.Fill>
                        </Ellipse>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ByteImage}">
        <Setter Property="Width" Value="{Binding ContentImage.Width}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ByteImage}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Image Source="{TemplateBinding ContentImage}" ToolTip="{TemplateBinding Width}" Width="{TemplateBinding Width}" Stretch="UniformToFill" Height="Auto" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:TitleTextBox}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TitleTextBox}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="{TemplateBinding Title}" Foreground="{TemplateBinding TitleForegroudn}" Margin="0,0,15,0"/>
                            <Border Name="BD_TextBorder" BorderBrush="Gray" BorderThickness="1"  Grid.Column="1">
                                <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BD_TextBorder" Property="BorderBrush" Value="Blue"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
